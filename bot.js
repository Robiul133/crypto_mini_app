// bot.js

const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const {
  addUser,
  getUser,
  updateBalance,
  addTradeHistory,
  addReferralCommission,
} = require("./database");

const TOKEN = "7992880264:AAHzk84wQpMSvZ1XtH0N5GUy3HWCYZVXlPI";
const bot = new TelegramBot(TOKEN, { polling: true });

const pendingAction = {};
const tradePending = {};

// Helper: Random boolean by probability
function randomChance(prob) {
  return Math.random() < prob;
}

// Live Market Price Fetch
async function getLiveMarketPrice(symbol = "BTCUSDT", platform = "binance") {
  try {
    if (platform === "binance") {
      const res = await axios.get(`https://api.binance.com/api/v3/ticker/price?symbol=${symbol}`);
      return parseFloat(res.data.price);
    }
    if (platform === "bybit") {
      const res = await axios.get(`https://api.bybit.com/v2/public/tickers?symbol=${symbol}`);
      return parseFloat(res.data.result[0].last_price);
    }
    if (platform === "kucoin") {
      const res = await axios.get(`https://api.kucoin.com/api/v1/market/orderbook/level1?symbol=${symbol}`);
      return parseFloat(res.data.data.price);
    }
    return null;
  } catch (err) {
    console.log(`${platform} API Error:`, err.message);
    return null;
  }
}

// /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  let referrerId = null;

  if (msg.text.includes("start ")) {
    const parts = msg.text.split(" ");
    if (parts[1] && parts[1] != chatId) referrerId = parts[1];
  }

  const user = addUser(chatId, referrerId);

  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üéÆ Trade", callback_data: "trade_menu" }],
        [{ text: "üí∞ Balance", callback_data: "balance" }],
        [{ text: "‚ûï Deposit", callback_data: "deposit" }],
        [{ text: "‚ûñ Withdraw", callback_data: "withdraw" }],
        [{ text: "üìù History", callback_data: "history" }],
        [{ text: "üë• Referral", callback_data: "referral" }],
        [{ text: "üîî Notifications", callback_data: "notifications" }],
      ],
    },
  };

  bot.sendMessage(
    chatId,
    `üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ Crypto Mini App ‡¶è!\n\nDemo Balance: $${user.demoBalance}\nReal Balance: $${user.realBalance}\n\nüëâ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
    options
  );

  if (referrerId) {
    addReferralCommission(referrerId, 0);
    bot.sendMessage(referrerId, `üë• ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Referral ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá: @${msg.from.username || msg.from.first_name}`);
  }
});

// Callback Queries
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const user = getUser(chatId);
  if (!user) return;

  switch (data) {
    case "trade_menu":
      bot.sendMessage(chatId, "üéÆ ‡¶ï‡ßã‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá?", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "Demo Balance", callback_data: "trade_demo" }],
            [{ text: "Real Balance", callback_data: "trade_real" }],
          ],
        },
      });
      break;

    case "trade_demo":
      user.activeBalance = "demo";
      chooseTradeSymbol(chatId);
      break;

    case "trade_real":
      user.activeBalance = "real";
      chooseTradeSymbol(chatId);
      break;

    case "balance":
      bot.sendMessage(chatId, `üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏:\nDemo: $${user.demoBalance}\nReal: $${user.realBalance}`);
      break;

    case "deposit":
      pendingAction[chatId] = { type: "deposit" };
      bot.sendMessage(chatId, "‚ûï Deposit ‡¶ï‡¶∞‡¶§‡ßá Amount ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (Min $10, Max $10000):");
      break;

    case "withdraw":
      pendingAction[chatId] = { type: "withdraw" };
      bot.sendMessage(chatId, "‚ûñ Withdraw ‡¶ï‡¶∞‡¶§‡ßá Amount ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (Min $10, Max $10000):");
      break;

    case "history":
      const history = user.tradeHistory || [];
      if (history.length === 0) bot.sendMessage(chatId, "üìù ‡¶ï‡ßã‡¶®‡ßã Trade History ‡¶®‡ßá‡¶á‡•§");
      else {
        let msgText = "üìù ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Trade History:\n\n";
        history.forEach((t, i) => {
          msgText += `${i + 1}. ${t.type.toUpperCase()} | $${t.amount} | ${t.symbol} | ${t.direction.toUpperCase()} | ${t.result.toUpperCase()} \n`;
        });
        bot.sendMessage(chatId, msgText);
      }
      break;

    case "referral":
      bot.sendMessage(chatId, `üë• ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Referral ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:\nhttps://t.me/CT_BinaryBot?start=${chatId}`);
      break;

    case "notifications":
      bot.sendMessage(chatId, "üîî Notifications ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
      user.notifications = true;
      break;

    default:
      if (data.startsWith("symbol_")) {
        const symbol = data.split("_")[1];
        tradePending[chatId] = { symbol };
        chooseTradeAmount(chatId);
      }
      if (data.startsWith("amount_")) {
        const amount = parseInt(data.split("_")[1]);
        tradePending[chatId].amount = amount;
        chooseTradeDirection(chatId);
      }
      if (data.startsWith("direction_")) {
        const direction = data.split("_")[1];
        tradePending[chatId].direction = direction;
        if (user.activeBalance === "demo") startDemoTrade(chatId, user, tradePending[chatId]);
        else startRealTrade(chatId, user, tradePending[chatId]);
      }
      break;
  }

  bot.answerCallbackQuery(query.id);
});

// Deposit/Withdraw Messages
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const action = pendingAction[chatId];
  if (!action) return;

  const user = getUser(chatId);
  if (!user) return;

  const amount = parseFloat(msg.text);
  if (isNaN(amount)) return bot.sendMessage(chatId, "‚ùå ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Æ‡¶§ Amount ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§");
  if (amount < 10 || amount > 10000)
    return bot.sendMessage(chatId, "‚ùå Amount 10 - 10000 ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§");

  if (action.type === "deposit") {
    updateBalance(chatId, "realBalance", amount);
    bot.sendMessage(chatId, `‚úÖ Deposit ‡¶∏‡¶´‡¶≤! +$${amount}\nReal Balance: $${user.realBalance}`);
    if (user.notifications) bot.sendMessage(chatId, `üîî Deposit Notification: +$${amount}`);
  }

  if (action.type === "withdraw") {
    if (user.realBalance < amount) return bot.sendMessage(chatId, "‚ùå Real Balance ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶®‡ßü‡•§");
    updateBalance(chatId, "realBalance", -amount);
    bot.sendMessage(chatId, `‚úÖ Withdraw ‡¶∏‡¶´‡¶≤! -$${amount}\nReal Balance: $${user.realBalance}`);
    if (user.notifications) bot.sendMessage(chatId, `üîî Withdraw Notification: -$${amount}`);
  }

  delete pendingAction[chatId];
});

// Trade Steps Functions
function chooseTradeSymbol(chatId) {
  bot.sendMessage(chatId, "üîπ ‡¶ï‡ßã‡¶® symbol ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶ï‡¶∞‡¶¨‡ßá?", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "BTCUSDT", callback_data: "symbol_BTCUSDT" }],
        [{ text: "ETHUSDT", callback_data: "symbol_ETHUSDT" }],
        [{ text: "BNBUSDT", callback_data: "symbol_BNBUSDT" }],
      ],
    },
  });
}

function chooseTradeAmount(chatId) {
  bot.sendMessage(chatId, "üíµ ‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶ï‡¶∞‡¶¨‡ßá?", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "$10", callback_data: "amount_10" }, { text: "$20", callback_data: "amount_20" }],
        [{ text: "$50", callback_data: "amount_50" }, { text: "$100", callback_data: "amount_100" }],
      ],
    },
  });
}

function chooseTradeDirection(chatId) {
  bot.sendMessage(chatId, "‚¨ÜÔ∏è ‡¶¨‡¶æ ‚¨áÔ∏è?", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "UP", callback_data: "direction_up" }, { text: "DOWN", callback_data: "direction_down" }],
      ],
    },
  });
}

// Demo Trade (70‚Äì80% Win)
function startDemoTrade(chatId, user, trade) {
  const balanceName = "demoBalance";
  const { symbol, amount, direction } = trade;
  const expiryTime = Math.random() < 0.5 ? 60000 : 120000; // 1 ‡¶¨‡¶æ 2 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü

  bot.sendMessage(chatId, `${symbol} ${direction} ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‚è±Ô∏è Expiry: ${expiryTime / 1000} sec`);

  setTimeout(() => {
    let win = randomChance(0.75);
    if (win) {
      const profit = amount * 1;
      updateBalance(chatId, balanceName, profit);
      addTradeHistory(chatId, "demo", amount, "win", symbol, direction);
      bot.sendMessage(chatId, `‚úÖ ‡¶ú‡ßü! +$${profit}\nDemo Balance: $${user[balanceName]}`);
    } else {
      updateBalance(chatId, balanceName, -amount);
      addTradeHistory(chatId, "demo", amount, "loss", symbol, direction);
      bot.sendMessage(chatId, `‚ùå ‡¶π‡¶æ‡¶∞! -$${amount}\nDemo Balance: $${user[balanceName]}`);
    }
  }, expiryTime);
}

// Real Trade (20‚Äì25% Win)
async function startRealTrade(chatId, user, trade) {
  const balanceName = "realBalance";
  const { symbol, amount, direction } = trade;
  const entryPrice = await getLiveMarketPrice(symbol);
  const expiryTime = Math.random() < 0.5 ? 60000 : 120000;

  bot.sendMessage(chatId, `${symbol} ${direction} ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‚è±Ô∏è Expiry: ${expiryTime / 1000} sec\nEntry Price: $${entryPrice}`);

  setTimeout(async () => {
    const exitPrice = await getLiveMarketPrice(symbol);
    let win = false;
    if (direction === "up" && exitPrice > entryPrice) win = randomChance(0.25);
    if (direction === "down" && exitPrice < entryPrice) win = randomChance(0.25);

    if (win) {
      const profit = amount * 0.8;
      updateBalance(chatId, balanceName, profit);
      addTradeHistory(chatId, "real", amount, "win", symbol, direction);
      if (user.referrerId) addReferralCommission(user.referrerId, amount * 0.02);
      bot.sendMessage(chatId, `‚úÖ ‡¶ú‡ßü! +$${profit}\nExit Price: $${exitPrice}\nReal Balance: $${user[balanceName]}`);
    } else {
      updateBalance(chatId, balanceName, -amount);
      addTradeHistory(chatId, "real", amount, "loss", symbol, direction);
      bot.sendMessage(chatId, `‚ùå ‡¶π‡¶æ‡¶∞! -$${amount}\nExit Price: $${exitPrice}\nReal Balance: $${user[balanceName]}`);
    }
  }, expiryTime);
}
